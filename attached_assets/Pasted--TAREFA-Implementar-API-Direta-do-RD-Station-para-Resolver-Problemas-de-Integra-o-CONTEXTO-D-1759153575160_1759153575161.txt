üéØ TAREFA: Implementar API Direta do RD Station para Resolver Problemas de Integra√ß√£o
üìã CONTEXTO DO PROBLEMA
Atualmente o projeto tem um formul√°rio animado React que coleta dados do usu√°rio, mas a integra√ß√£o com RD Station est√° falhando porque:

Widget RD Station conflita com o formul√°rio customizado
Acontecem redirects indesejados para cta-redirect.rdstation.com
Tela fica preta ap√≥s envio
Leads n√£o s√£o criados no RD Station
Console mostra 15 erros de runtime.lastError
üéØ SOLU√á√ÉO REQUERIDA
Implementar integra√ß√£o direta com API do RD Station mantendo:

Design atual do formul√°rio animado
Experi√™ncia do usu√°rio sem redirects
Tracking autom√°tico de UTM parameters e dados de sess√£o
Controle total sobre success/error handling
üìÅ ARQUIVOS PARA CRIAR/MODIFICAR
1. CRIAR: client/src/utils/tracking.ts
Copyexport interface TrackingData {
  url_pagina: string;
  referrer: string;
  utm_source: string;
  utm_medium: string;
  utm_campaign: string;
  utm_content: string;
  utm_term: string;
  session_id: string;
  user_agent: string;
  screen_resolution: string;
  viewport_size: string;
  timezone: string;
  ga_client_id?: string;
}

export function getTrackingData(): TrackingData {
  // Capturar URL e referrer
  const urlData = {
    url_pagina: window.location.href,
    referrer: document.referrer || '',
  };

  // Capturar UTM parameters da URL
  const urlParams = new URLSearchParams(window.location.search);
  const utmData = {
    utm_source: urlParams.get('utm_source') || '',
    utm_medium: urlParams.get('utm_medium') || '',
    utm_campaign: urlParams.get('utm_campaign') || '',
    utm_content: urlParams.get('utm_content') || '',
    utm_term: urlParams.get('utm_term') || '',
  };

  // Dados do browser
  const browserData = {
    user_agent: navigator.userAgent,
    screen_resolution: `${screen.width}x${screen.height}`,
    viewport_size: `${window.innerWidth}x${window.innerHeight}`,
    timezone: Intl.DateTimeFormat().resolvedOptions().timeZone,
  };

  // Session ID (criar se n√£o existir)
  const sessionData = {
    session_id: getOrCreateSessionId(),
  };

  // Google Analytics (se dispon√≠vel)
  const gaData = getGoogleAnalyticsData();

  return {
    ...urlData,
    ...utmData,
    ...browserData,
    ...sessionData,
    ...gaData,
  };
}

function getOrCreateSessionId(): string {
  let sessionId = localStorage.getItem('lina_session_id');
  if (!sessionId) {
    sessionId = 'sess_' + Date.now() + '_' + Math.random().toString(36).substr(2, 9);
    localStorage.setItem('lina_session_id', sessionId);
  }
  return sessionId;
}

function getGoogleAnalyticsData(): { ga_client_id?: string } {
  try {
    // Tentar GA4 primeiro
    if (typeof gtag !== 'undefined') {
      return {
        ga_client_id: gtag.get('client_id'),
      };
    }
    // Fallback para Universal Analytics
    if (typeof ga !== 'undefined') {
      const tracker = ga.getAll()[0];
      return {
        ga_client_id: tracker ? tracker.get('clientId') : undefined,
      };
    }
  } catch (error) {
    console.log('GA data not available:', error);
  }
  return {};
}
2. CRIAR: client/src/api/rdstation.ts
Copyimport { getTrackingData, type TrackingData } from '../utils/tracking';

export interface FormData {
  nome: string;
  email: string;
  telefone: string;
  empresa: string;
  faturamento?: string;
  cargo?: string;
}

export interface RDStationPayload {
  conversion_identifier: string;
  token_rdstation: string;
  name: string;
  email: string;
  personal_phone: string;
  company: string;
  cf_faturamento_da_empresa?: string;
  cf_cargo_bw?: string;
  cf_utm_source: string;
  cf_utm_medium: string;
  cf_utm_campaign: string;
  cf_utm_content: string;
  cf_utm_term: string;
  cf_url_pagina: string;
  cf_referrer: string;
  cf_session_id: string;
  cf_browser: string;
  cf_resolution: string;
  client_id?: string;
  created_at: string;
}

export async function submitToRDStation(formData: FormData): Promise<any> {
  const trackingData = getTrackingData();
  
  const payload: RDStationPayload = {
    // Configura√ß√£o do RD Station
    conversion_identifier: 'teste_lina-bw_lp_linapay',
    token_rdstation: '79eeb6bb9c3bc26daa788a85edb61cf7',
    
    // Dados do formul√°rio
    name: formData.nome,
    email: formData.email,
    personal_phone: formData.telefone,
    company: formData.empresa,
    
    // Campos customizados (opcionais)
    cf_faturamento_da_empresa: formData.faturamento || '',
    cf_cargo_bw: formData.cargo || '',
    
    // Tracking autom√°tico
    cf_utm_source: trackingData.utm_source,
    cf_utm_medium: trackingData.utm_medium,
    cf_utm_campaign: trackingData.utm_campaign,
    cf_utm_content: trackingData.utm_content,
    cf_utm_term: trackingData.utm_term,
    cf_url_pagina: trackingData.url_pagina,
    cf_referrer: trackingData.referrer,
    cf_session_id: trackingData.session_id,
    cf_browser: trackingData.user_agent,
    cf_resolution: trackingData.screen_resolution,
    
    // Google Analytics
    client_id: trackingData.ga_client_id || '',
    
    // Timestamp
    created_at: new Date().toISOString(),
  };

  console.log('Enviando dados para RD Station:', payload);

  try {
    const response = await fetch('https://api.rd.services/platform/conversions', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(payload)
    });

    if (!response.ok) {
      const errorText = await response.text();
      throw new Error(`Erro ${response.status}: ${response.statusText} - ${errorText}`);
    }

    const result = await response.json();
    console.log('Lead enviado com sucesso para RD Station:', result);
    return result;

  } catch (error) {
    console.error('Erro ao enviar para RD Station:', error);
    throw error;
  }
}
3. MODIFICAR: Componente AnimatedForm
IMPORTANTE: Localize o arquivo do componente principal do formul√°rio (provavelmente em client/src/components/AnimatedForm.tsx ou similar) e fa√ßa estas modifica√ß√µes:

Adicionar imports no topo:

Copyimport { submitToRDStation } from '../api/rdstation';
Substituir a fun√ß√£o de submit atual por:

Copyconst handleSubmit = async () => {
  console.log('Iniciando envio do formul√°rio...', formData);
  setIsFormSubmitted(true);
  
  try {
    // Preparar dados para o RD Station
    const rdData = {
      nome: formData.nome,
      email: formData.email,
      telefone: formData.telefone,
      empresa: formData.empresa,
    };

    console.log('Dados preparados para envio:', rdData);

    // Enviar para RD Station via API direta
    await submitToRDStation(rdData);
    
    console.log('‚úÖ Lead enviado com sucesso!');
    
    // Disparar evento de analytics (se GA estiver dispon√≠vel)
    if (typeof gtag !== 'undefined') {
      gtag('event', 'form_submit', {
        event_category: 'engagement',
        event_label: 'rd_station_form_success'
      });
    }
    
    // Opcional: redirecionar para p√°gina de obrigado ou mostrar mensagem
    // window.location.href = '/obrigado';
    
  } catch (error) {
    console.error('‚ùå Erro no envio do formul√°rio:', error);
    setIsFormSubmitted(false);
    
    // Disparar evento de erro no analytics
    if (typeof gtag !== 'undefined') {
      gtag('event', 'form_error', {
        event_category: 'engagement',
        event_label: 'rd_station_form_error'
      });
    }
    
    // Aqui voc√™ pode mostrar uma mensagem de erro para o usu√°rio
    alert('Erro ao enviar formul√°rio. Tente novamente.');
  }
};
4. REMOVER/DESABILITAR: Componente RDStationForm
Localizar onde o componente RDStationForm √© usado (provavelmente no componente principal) e:

OP√á√ÉO A - Remover completamente:

Copy// Remover esta linha:
// import RDStationForm from './RDStationForm';

// Remover o componente do JSX:
// <RDStationForm />
OP√á√ÉO B - Comentar temporariamente:

Copy{/* <RDStationForm formId="teste_lina-bw_lp_linapay-4d252035dc055a459f05" /> */}
üß™ INSTRU√á√ïES DE TESTE
Verificar se os arquivos foram criados:

client/src/utils/tracking.ts
client/src/api/rdstation.ts
Verificar modifica√ß√µes:

Componente principal do formul√°rio importa submitToRDStation
Fun√ß√£o handleSubmit foi substitu√≠da
Componente RDStationForm foi removido/desabilitado
Testar funcionamento:

Abrir DevTools (F12)
Preencher formul√°rio na p√°gina /data-link
Verificar logs no console durante envio
Confirmar que n√£o h√° redirects
Verificar se lead aparece no RD Station
Debugs esperados no console:

Iniciando envio do formul√°rio...
Dados preparados para envio: {...}
Enviando dados para RD Station: {...}
Lead enviado com sucesso para RD Station: {...}
‚úÖ Lead enviado com sucesso!
‚ö†Ô∏è PONTOS DE ATEN√á√ÉO
Preservar design atual - N√£o alterar CSS/styling do formul√°rio
Manter valida√ß√µes existentes - N√£o remover valida√ß√µes de campos
N√£o quebrar anima√ß√µes - Manter toda l√≥gica de steps/anima√ß√µes
Error handling - Adicionar logs detalhados para debugging
üéØ RESULTADO ESPERADO
Ap√≥s implementa√ß√£o:

‚úÖ Formul√°rio mant√©m design e anima√ß√µes atuais
‚úÖ Envio funciona sem redirects ou tela preta
‚úÖ Leads s√£o criados no RD Station
‚úÖ Tracking autom√°tico de UTMs e dados de sess√£o
‚úÖ Logs claros para debugging
‚úÖ Zero erros no console
Execute esta implementa√ß√£o passo a passo e me avise se houver algum erro durante o processo.